<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on 阿茂的博客</title>
    <link>http://example.org/posts/</link>
    <description>Recent content in Posts on 阿茂的博客</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-Hans</language>
    <lastBuildDate>Thu, 02 Dec 2021 14:14:34 +0800</lastBuildDate><atom:link href="http://example.org/posts/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>多种方法实现生产者消费者模型</title>
      <link>http://example.org/posts/%E5%A4%9A%E7%A7%8D%E6%96%B9%E6%B3%95%E5%AE%9E%E7%8E%B0%E7%94%9F%E4%BA%A7%E8%80%85%E6%B6%88%E8%B4%B9%E8%80%85%E6%A8%A1%E5%9E%8B/</link>
      <pubDate>Thu, 02 Dec 2021 14:14:34 +0800</pubDate>
      
      <guid>http://example.org/posts/%E5%A4%9A%E7%A7%8D%E6%96%B9%E6%B3%95%E5%AE%9E%E7%8E%B0%E7%94%9F%E4%BA%A7%E8%80%85%E6%B6%88%E8%B4%B9%E8%80%85%E6%A8%A1%E5%9E%8B/</guid>
      <description>记录一下多种方法实现生产者消费者模型 要求：生产者生产10个随机的整数供消费者使用，消费者依次消费这10个随机的整数 标准输出应该得到这样的结果： Producing 42 Consuming 42 Producing -1 Consuming -1 ... Producing 10086 Consuming 10086 Producing -12345678 Consuming -12345678 分析要求 我们可以分别创建生产者线程和消费者线程，生产者每生产一个，消费者随即消费一个，所以两个线程需要协同工作，生产者只有在消费者消费之后才会继续生产，消费者只有在生产者生产之后才会消费
多种方法实现   Object.wait/notify
我们可以使用 Optional 作为存放随机数的容器，通过这个共有的容器去协同两个线程的工作，一定要注意的是：Optional是不可变的，两个线程如果有同一个Optional对象的引用，那么生产者线程每次都生产一个随机数，都会指向新的Optional对象，而消费者线程拿到的还是旧的对象，这样肯定得不到我们想要的结果。 所以我们应该在Optional外面包一层类，问题就迎刃而解了！
package com.github.hcsp.multithread; import java.util.Optional; import java.util.Random; public class ProducerConsumer1 { public static void main(String[] args) throws InterruptedException { //同一把Object锁 Object lock = new Object(); Container container = new Container(); Producer producer = new Producer(lock, container); Consumer consumer = new Consumer(lock, container); producer.</description>
    </item>
    
    <item>
      <title>Collection体系的常用类及其背后的数据结构</title>
      <link>http://example.org/posts/collection%E4%BD%93%E7%B3%BB%E7%9A%84%E5%B8%B8%E7%94%A8%E7%B1%BB%E5%8F%8A%E5%85%B6%E8%83%8C%E5%90%8E%E7%9A%84%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/</link>
      <pubDate>Wed, 27 Oct 2021 13:16:34 +0800</pubDate>
      
      <guid>http://example.org/posts/collection%E4%BD%93%E7%B3%BB%E7%9A%84%E5%B8%B8%E7%94%A8%E7%B1%BB%E5%8F%8A%E5%85%B6%E8%83%8C%E5%90%8E%E7%9A%84%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/</guid>
      <description>记录一下Collection体系的常用类及其背后的数据结构 Collection体系 概述 Collection是集合层次结构中的根接口。 一个集合代表一组对象，称为它的元素。 一些集合允许重复元素，而另一些则不允许。 有些是有序的，有些是无序的。 JDK 不提供此接口的任何直接实现：它提供了更具体的子接口（如 Set 和 List）的实现。
Collection集合的通用方法  boolean add(E e)：把给定的对象添加到当前集合中 boolean addAll(E e)：把给定的集合添加到当前集合中 void clear()：清空集合中所有的元素 boolean remove(Object o)：把给定对象在当前集合中删除，删除成功返回true，失败返回false boolean contains(Object o)：判断当前集合中是否包含给定的对象，包含返回true，不包含返回false boolean isEmpty()：判断当前集合是否为空，为空返回true，不为空返回false int size()：返回集合中元素的个数 boolean rainAll(): 仅保留此集合中包含在指定集合中的元素,换句话说，从该集合中移除所有未包含在指定集合中的元素 Object[] toArray()：把集合中的元素存储到数组中 （调用此方法，将集合元素存入数组返回数组，再对数组进行遍历即可）  List接口 概述  List是Collection的子接口，本质是一个数组，但是可以动态扩容 有序：元素的存储顺序和获取顺序保持一致 可重复：允许存储重复元素 可重复的原因：有索引。因为对于重复的元素，具有不同的索引来区分  List 方法  add(int index, Object obj) ：将指定元素插入到集合的指定位置 remove(int index) 删除指定索引上的指定元素 set(int index, Object obj) 用指定元素替换指定索引上原有的元素 get(int index) 返回指定索引上的元素 （通过size方法获取到集合的长度，进而就能得到List集合的索引范围，再配合get方法，就能获取到每一个索引对应的每一个元素）  List 实现类  ArrayList：数组实现，顺序存储，增删慢，查询快 LinkedList：双向链表，节点存储，每个对象包含数据的同时还包含指向链表中前一个与后一个元素的引用，增和删比较快,查询和修改比较慢  Set接口 概述  Set 接口比 Collection 接口更加严格，不允许存储重复的元素 没有索引，即没有带索引的方法，所以不能使用传统for循环遍历  Set 方法 Set 实现类 Hashset   Hashset是Set接口的一个实现类，它所存储的元素是不可重复的，并且元素都是无序的（即存取顺序有可能不一致）</description>
    </item>
    
    <item>
      <title>解决包冲突</title>
      <link>http://example.org/posts/%E8%A7%A3%E5%86%B3%E5%8C%85%E5%86%B2%E7%AA%81/</link>
      <pubDate>Thu, 21 Oct 2021 22:51:56 +0800</pubDate>
      
      <guid>http://example.org/posts/%E8%A7%A3%E5%86%B3%E5%8C%85%E5%86%B2%E7%AA%81/</guid>
      <description>记录一下如何解决包冲突（小白视角大白话） 类路径（Claspath）  类的全限定类名（目录层级） 唯一确定了一个类 包就是把许多类放在⼀起的压缩包 在哪⾥可以找到类？-classpath/-cp 后面的包中！  我们在使用第三方类时，可能所使用的第三方类依赖了其他类，全限定类名是类的唯⼀标识！没有其他标识了！当多个同名类同时出现在Classpath中，麻烦就来了！
Maven——划时代的包管理  Maven的中央仓库，按照⼀定的约定存储包，按照约定为所有的包编号，⽅便检索（groupId/artifactId/version） Maven的本地仓库，默认位于~/.m2（下载的第三⽅包放在这⾥进⾏缓存） 传递性依赖的⾃动管理，即绝对不允许最终的classpath出现同名不同版本的jar包 依赖冲突的解决：原则：最近的胜出  解决包冲突 当你看到如下的异常的时候，说明包冲突了！
 AbstractMethodError NoClassDefFoundError ClassNotFoundException LinkageError  不要着急  看下后面异常的包名，idea右上角的Maven dependencies可以查看具体的依赖关系，也可以在终端中执行 mvn dependency:tree 查看Maven帮你解决冲突后的依赖关系（它把冲突解决后的那个依赖给咱们去掉了） 在mvn中央仓库中，通过包的编号（groupId/artifactId/version）通过源码查看不同版本的信息，选择需要的版本  方法一 既然谁离得近谁赢，那我们可以强行在 pom.xml 中直接引用正确的版本，如果 dependencies 中已经存在依赖的版本，将其删除或者改正为正确的版本
方法二 将依赖错误版本的包排除，即在依赖 错误版本的包 的依赖中插入代码,如图 方法三 Maven helper 插件 </description>
    </item>
    
    <item>
      <title>使用hugo搭建个人博客</title>
      <link>http://example.org/posts/%E4%BD%BF%E7%94%A8hugo%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/</link>
      <pubDate>Wed, 20 Oct 2021 18:38:17 +0800</pubDate>
      
      <guid>http://example.org/posts/%E4%BD%BF%E7%94%A8hugo%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/</guid>
      <description>记录一下自己刚刚学到的用 hugo 搭建个人博客（小白视角大白话） git本地仓库  所有软件都需要先配置，git的六行配置   git config --global user.name 英文名 git config --global user.email 邮箱 git config --global push.default simple git config --global core.quotepath false git config --global core.editor &amp;quot;code --wait&amp;quot; git config --global core.autocrlf input 初始化，也就是创建一个仓库（.git目录）   git init 然后一顿敲代码改代码，自己觉得没问题之后
 选择需要提交的文件   git add 绝对路径/相对路径  创建.gitignore目录,写入不需要提交的文件名
  提交到本地仓库，并给出备注/理由
   git commit -m 字符串 or git commit -v git远程仓库 Github Github上有账号，电脑上有本地仓库，使用 ssh key 让他们彼此联系起来吧！</description>
    </item>
    
    <item>
      <title>开博大吉</title>
      <link>http://example.org/posts/%E5%BC%80%E5%8D%9A%E5%A4%A7%E5%90%89/</link>
      <pubDate>Tue, 19 Oct 2021 23:30:54 +0800</pubDate>
      
      <guid>http://example.org/posts/%E5%BC%80%E5%8D%9A%E5%A4%A7%E5%90%89/</guid>
      <description>大家好 我的博客开通了！大家一起加油！</description>
    </item>
    
  </channel>
</rss>
